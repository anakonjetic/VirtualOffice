@using Microsoft.AspNetCore.Identity
@* @inject UserManager<IdentityUser> UserManager *@
@{
    Layout = null; // Remove layout inheritance
    Layout = "";
}

@model string

<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <title>Virtual Office - Employee</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
    }

    .top-card {
      position: fixed;
      top: 0;
      left: 200px;
      right: 0;
      height: 100px;
      background-color: #007bff;
      color: #fff;
      display: flex;
      font-size: 40px;
      display: flex;
      align-items: center; 
      justify-content: flex-start; 
      padding-left: 20px;
    }

    .vertical-nav {
      position: fixed;
      left: 0;
      top: 0; 
      width: 200px; 
      height: 100%; 
      background-color: #333;
    }

    .vertical-nav ul {  
      border-top: 1px solid #555;
      margin-top: 100px;
      list-style-type: none;
      padding: 0;
    }

    .vertical-nav li {
      border-bottom: 1px solid #555;
    }

    .vertical-nav li:last-child {
      border-bottom: none;
    }

    .vertical-nav a {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 15px 20px;
    }

    .vertical-nav a:hover {
      background-color: #555;
    }

    .user-circle {
      position: absolute;
      top: 15px;
      right: 15px;
      width: 60px;
      height: 60px;
      background-color: #555;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      color: #fff;
      font-size: 25px;
    }

    .dropdown {
      position: absolute;
      top: 60px; 
      right: 15px;
      background-color: #333;
      padding: 10px;
      border-radius: 5px;
      display: none;
      font-size: 20px;
    }

    .dropdown a, button {
      display: block;
      color: #fff;
      text-decoration: none;
      padding: 5px 0;
      font-size: 20px;
    }

   .content2 {
    margin-left: 280px;
    margin-top: 110px;
    padding: 20px;
    width: calc(100% - 400px); /* Subtract the width of the vertical nav */
    height: calc(100% - 150px); /* Subtract the height of the top card */
    overflow-y: auto; /* Add scrollbar if content exceeds height */
    background-color: #fff; /* Set background color */
    border-radius: 8px; /* Add border radius for a rounded look */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Add shadow for depth */
}

  </style>
</head>
<body>
    <nav class="vertical-nav">
        <ul>
            <li><a href="#" data-target="home">Home</a></li>
            <li><a href="#" data-target="evaluation">Evaluation Form</a></li>
            <li><a href="#" data-target="outOfOffice">Out of Office Forms</a></li>
            <li><a href="#" data-target="equipment">Equipment Management</a></li>
            <li><a href="#" data-target="clockIn">Clock In - Clock Out</a></li>
        </ul>
    </nav>
  <div class="top-card">
    @{
        string username = "";
        if (User.Identity.IsAuthenticated)
        {
            string email = User.Identity.Name;
            int atIndex = email.IndexOf('@');
            if (atIndex != -1)
            {
                username = email.Substring(0, atIndex);
            }
            else
            {
                username = email;
            }
        }
    }
    Hello, @username!
    
    <div class="user-circle" onclick="toggleDropdown()" style="text-transform: uppercase;"> @{
        string userId = "";
        if (User.Identity.IsAuthenticated)
        {
            string email = User.Identity.Name;
            userId = (email.Substring(0, 2));
        }
    }@userId</div>
    <div class="dropdown" id="dropdown">
        <a href="#">Profile</a>
        <a href="#" data-target="settings" id="settings">Settings</a>
        <a asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">Logout</a>
    </div>
  </div>

       <div class="content2" id="content2">
        <!--partials se izgeneriraju ovdje-->
  </div>


   <script>

    //loadanje partiala po loadanju stranice --start
       document.addEventListener("DOMContentLoaded", function () {
       
        var modelString = '@Model';
        if (modelString.trim() !== '') {
            loadPartialViewEmployee(modelString);
        }else{
            loadPartialViewEmployee('home')
        }       
        });
        //loadanje partiala po loadanju stranice --end

    //dropdown za logout --start
    function toggleDropdown() {
      var dropdown = document.getElementById("dropdown");
      if (dropdown.style.display === "none" || dropdown.style.display === "") {
        dropdown.style.display = "block";
      } else {
        dropdown.style.display = "none";
      }
    }
    //dropdown za logout --end

        document.getElementById("settings")
            .addEventListener('click', event => {
                event.preventDefault();
                const target = event.target.dataset.target;
                loadPartialViewEmployee(target);
            });

    //trigger za navigaciju --start
    document.querySelectorAll('.vertical-nav a').forEach(item => {
        item.addEventListener('click', event => {
            event.preventDefault();
            const target = event.target.dataset.target;
            loadPartialViewEmployee(target);
        });
    });
    //trigger za navigaciju --end

    function clockIn() {
        $.ajax({
            url: '/Employee/ClockIn',
            type: 'POST',
            success: function (response) {
                if (response.success) {
                    var clockInTime = new Date();
                    var formattedClockInTime = formatDate(clockInTime);
                    $('#clockDisplay').text('Clock In Time: ' + formattedClockInTime);
                } else {
                    showError(response.message);
                }
            },
            error: function (xhr, status, error) {
                showError('Clock in operation failed: ' + error);
            }
        });
    }

    function clockOut() {
        $.ajax({
            url: '/Employee/ClockOut',
            type: 'POST',
            success: function (response) {
                if (response.success) {
                    var clockOutTime = new Date();
                    var formattedClockOutTime = formatDate(clockOutTime);
                    var message = 'Clock Out Time: ' + formattedClockOutTime;
                    if (response.timeWorked) {
                        message += ' | Time Worked: ' + response.timeWorked;
                    }
                    $('#clockDisplay').text(message);
                } else {
                    showError(response.message);
                }
            },
            error: function (xhr, status, error) {
                showError('Clock out operation failed: ' + error);
            }
        });
    }


    function formatDate(date) {
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        return pad(hours) + ':' + pad(minutes) + ':' + pad(seconds);
    }

    function pad(num) {
        return (num < 10 ? '0' : '') + num;
    }

    function showError(message) {
        // Display error message to the user
        $('#clockDisplay').text(message);
    }

    //logika za loadanje partiala u content2 --start
    function loadPartialViewEmployee(target) {
      const url = '@Url.Action("LoadPartialView", "Employee")?target=' + target;
      fetch(url)
        .then(response => response.text())
        .then(data => {
          document.getElementById('content2').innerHTML = data;
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }
    //logika za loadanje partiala u content2 --end

    //create request (out of office) logika --start

     function createRequest() {
      const url = '@Url.Action("RequestCreate", "Employee")';
      fetch(url)
        .then(response => response.text())
        .then(data => {
          document.getElementById('content2').innerHTML = data;
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    //create request (out of office) logika --end

    //pošalji request na manager approval --start

    function sendOoOToApproval(requestId) {
      const url = '@Url.Action("SendRequestToApproval", "Employee")?requestId=' + requestId;
      fetch(url)
        .then(response => response.text())
        .then(data => {
          document.getElementById('content2').innerHTML = data;
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    //pošalji request na manager approval --end

    //obriši OoO request --start

    function deleteNewOoORequest(requestId) {
      const url = '@Url.Action("DeleteOoORequest", "Employee")?requestId=' + requestId;
      fetch(url)
        .then(response => response.text())
        .then(data => {
          document.getElementById('content2').innerHTML = data;
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    //obriši OoO request --end

    //loadanje request ooo summary --start

     function loadRequestOoODetailView(requestId) {
      const url = '@Url.Action("RequestOoODetails", "Employee")?requestId=' + requestId;
      fetch(url)
        .then(response => response.text())
        .then(data => {
          document.getElementById('content2').innerHTML = data;
        })
        .catch(error => {
          console.error('Error:', error);
        });
    }

    //loadanje request ooo summary --end

    function updateRating2(value) {
        document.getElementById("ratingValue").innerText = value;
        document.getElementById("ratingInput").value = value;
    }

    function showEvaluationForm2(employeeId, employeeName, managerId, managerName) {
        const formWrapper = document.getElementById('evaluation-form-wrapper');
        const form = document.getElementById('evaluation-form');
        const employeeNameElement = document.getElementById('employee-name');

        // Set employee name in the form
        employeeNameElement.innerText = managerName;

        // Show form
        formWrapper.style.display = 'block';

        document.getElementById('employeeId').value = employeeId;
        document.getElementById('managerId').value = managerId;

        document.getElementById('evaluationType').addEventListener('change', function () {
            var selectedValue = this.value;
            document.getElementById('evaluationTypeId').value = selectedValue;
        });
    }


  </script>


</body>